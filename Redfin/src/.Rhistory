# Find the applicable transactions for this date
NetSubsTbl <- x[(StartDate<=ReportDate & EndDate>ReportDate & (LatestStatus %in% ActiveSubStates)),
.(Total=.N),by=.(AppStore,Frequency,CountryCode,Type)][order(AppStore,Frequency,CountryCode,Type,-Total)]
NetSubsTbl <- spread(as.data.frame(NetSubsTbl),Type,Total,fill=0)
# Now convert back to a data.table
NetSubsTbl <- as.data.table(NetSubsTbl)
# Some of the initial reports have no instances of Initial Subscription so
# add it as a column and just set it to 0
if(is.null(NetSubsTbl$InitialSubscription)){
NetSubsTbl[,InitialSubscription := 0]
}
if(is.null(NetSubsTbl$ExtendedFreeTrial)){
NetSubsTbl[,ExtendedFreeTrial := 0]
}
if(is.null(NetSubsTbl$DFImportActive)){
NetSubsTbl[,DFImportActive := 0]
}
if(is.null(NetSubsTbl$DFImportCancel)){
NetSubsTbl[,DFImportCancel := 0]
}
if(is.null(NetSubsTbl$FreeTrial)){
NetSubsTbl[,FreeTrial := 0]
}
if(is.null(NetSubsTbl$Reactivate)){
NetSubsTbl[,Reactivate := 0]
}
# Add the Paying Subs Column
NetSubsTbl[,PayingSubs:= DFImportActive+InitialSubscription+Renewal+Reactivate,
,by=.(AppStore,Frequency,CountryCode)][order(-PayingSubs)]
# Add the TotalSubs Column
NetSubsTbl[,TotalSubs:= PayingSubs+FreeTrial,
,by=.(AppStore,Frequency,CountryCode)][order(-TotalSubs)]
NetSubsTbl
NetSubsTbl[AppStore=='stripe']
NetSubsTbl[AppStore=='stripe']['TotalSubs']
NetSubsTbl[AppStore=='stripe','TotalSubs']
sum(NetSubsTbl[AppStore=='stripe','TotalSubs'])
ReportDate
ReportDate = ReportDate +12
ReportDate
x = LogTbl
# Find the latest status of an account
LatestStatus <- x[StartDate<=ReportDate & StartDate> RollbackPeriod(ReportDate, months(13)), .SD[c(.N)], .SDcols=c('Type'), by=c('UserCode','SKU')]
setnames(LatestStatus, c("UserCode","SKU","LatestStatus") )
# Filter out only active accounts
x <- merge(x, LatestStatus, by = c('UserCode','SKU'), all = FALSE)
rm(LatestStatus)
gc()
# Create a new column to record the frequency of the subscription type
x[,Frequency := ""]
# Find the Annual Rows
AnnualRows <- grep("Annual",x$SKU)
MonthlyRows <- grep("Monthly",x$SKU)
# Update the rows with the appropriate frequency type
x[MonthlyRows,Frequency := "Monthly"]
x[AnnualRows, Frequency := "Annual"]
x[Frequency=="", Frequency := "Comp"]
# Find the applicable transactions for this date
NetSubsTbl <- x[(StartDate<=ReportDate & EndDate>ReportDate & (LatestStatus %in% ActiveSubStates)),
.(Total=.N),by=.(AppStore,Frequency,CountryCode,Type)][order(AppStore,Frequency,CountryCode,Type,-Total)]
# Spread the Transaction type values into seperate columns, make sure this
# Operation is done as a DataFrame
NetSubsTbl <- spread(as.data.frame(NetSubsTbl),Type,Total,fill=0)
# Now convert back to a data.table
NetSubsTbl <- as.data.table(NetSubsTbl)
# Some of the initial reports have no instances of Initial Subscription so
# add it as a column and just set it to 0
if(is.null(NetSubsTbl$InitialSubscription)){
NetSubsTbl[,InitialSubscription := 0]
}
if(is.null(NetSubsTbl$ExtendedFreeTrial)){
NetSubsTbl[,ExtendedFreeTrial := 0]
}
if(is.null(NetSubsTbl$DFImportActive)){
NetSubsTbl[,DFImportActive := 0]
}
if(is.null(NetSubsTbl$DFImportCancel)){
NetSubsTbl[,DFImportCancel := 0]
}
if(is.null(NetSubsTbl$FreeTrial)){
NetSubsTbl[,FreeTrial := 0]
}
if(is.null(NetSubsTbl$Reactivate)){
NetSubsTbl[,Reactivate := 0]
}
# Add the Paying Subs Column
NetSubsTbl[,PayingSubs:= DFImportActive+InitialSubscription+Renewal+Reactivate,
,by=.(AppStore,Frequency,CountryCode)][order(-PayingSubs)]
# Add the TotalSubs Column
NetSubsTbl[,TotalSubs:= PayingSubs+FreeTrial,
,by=.(AppStore,Frequency,CountryCode)][order(-TotalSubs)]
sum(NetSubsTbl[AppStore=='stripe','TotalSubs'])
unique(LogTbl$SKU)
data = readRDS('./ProcessedCiscoData/Sundance20170514.RDS')
head(data)
dim(data[CiscoStatus=='Active'])
dim(data[CiscoStatus=='Active'&AppStore=='stripe'])
data = readRDS('./ProcessedCiscoData/Shudder20170514.RDS')
dim(data[CiscoStatus=='Active'&AppStore=='stripe'])
data = readRDS('./ProcessedCiscoData/Shudder20170503.RDS.RDS')
data = readRDS('./ProcessedCiscoData/Shudder20170503.RDS')
dim(data[CiscoStatus=='Active'&AppStore=='stripe'])
data = readRDS('./ProcessedCiscoData/Sundance20170503.RDS')
dim(data[CiscoStatus=='Active'&AppStore=='stripe'])
getwd()
username = read.csv('username.csv')
username
head(username)
CancelsTbl = read.csv('username.csv')
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
library("base64enc")
source("src/CommonCiscoReportDefinitions.R")
source("src/Utils.R")
source("src/CleanStripe.R")
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
i
suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl$Username)),"=","_")))
suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl$Username)),"=","_"))
CancelsTbl$Username
charToRaw(CancelsTbl$Username)
charToRaw(CancelsTbl$Username[1])
CancelsTbl$Username[1]
CancelsTbl = read.csv('username.csv', stringsAsFactors = FALSE)
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_"))
suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl$Username)),"=","_"))
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
CancelsTbl
CancelsTbl.to_csv('UserName_masked.csv')
write.csv(CancelsTbl,'UserName_masked.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
head(CancelsTbl)
rows = 1:nrow(CancelsTbl)
rows[[1]]
seq_along(rows)
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
tryCatch()
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
tryCatch()
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
CancelsTbl = as.data.table(read.csv('username.csv', stringsAsFactors = FALSE))
CancelsTbl[,MaskedUsername:=""]
rows = 1:nrow(CancelsTbl)
for(i in seq_along(rows)){
set(CancelsTbl,
i=rows[[i]],
j="MaskedUsername",
value = suppressWarnings(str_replace_all(base64encode(charToRaw(CancelsTbl[i]$Username)),"=","_")))
}
write.csv(CancelsTbl,'userName.csv')
data  = readRDS('./ProcessedCiscoData/Sundance20170515.RDS')
head(data)
ReportDate
ReportDate = ReportDate-3
PartialFileName <- str_replace_all(as.character(ReportDate),"-","")
InputFileName = paste0(CiscoReportInputFilePrefix,PartialFileName,".txt")
OutputFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,".RDS")
if(!ExportNoSubscriptions && !ReprocessAll && file.exists(OutputFileName)){
flog.info("Clean Cisco Data: Skipping (output file exists): %s", as.character(ymd(PartialFileName)))
return()
}
OutputNoSubscriptionFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,"NoSubscription",".RDS")
OutputCompAccountFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,"CompAccounts",".RDS")
ExportNoSubscriptions=FALSE
ReprocessAll=FALSE
PartialFileName <- str_replace_all(as.character(ReportDate),"-","")
InputFileName = paste0(CiscoReportInputFilePrefix,PartialFileName,".txt")
OutputFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,".RDS")
if(!ExportNoSubscriptions && !ReprocessAll && file.exists(OutputFileName)){
flog.info("Clean Cisco Data: Skipping (output file exists): %s", as.character(ymd(PartialFileName)))
return()
}
OutputNoSubscriptionFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,"NoSubscription",".RDS")
OutputCompAccountFileName = paste0(CiscoReportOutputFilePrefix,PartialFileName,"CompAccounts",".RDS")
#
#   STEP 2: LOADING DATA
#
# A list of columns that we intend of dropping
ColumnsToDrop <- NULL
if(file.exists(InputFileName)){
flog.info("Clean Cisco Data: Processing: %s", as.character(ymd(PartialFileName)))
}else{
flog.warn("Doesn't Exist: %s", PartialFileName)
return()
}
FirstRows <- read.delim(InputFileName,header=TRUE,nrows=5,na.strings=c(""))
## decide which CISCO format
IdealColumnDataTypes <- LATEST_SCHEMA
# Get the names of all of the columns in this file
ColTypes <- sapply(FirstRows, class)
SubDF <- read.delim(InputFileName,header=TRUE,na.strings=c(""),colClasses=ColTypes,quote="")
SetService(SHUDDER)
Service
SUNDANCE
Ser = SUNDANCE
SetService(Serv)
START_DATE <- ymd("2017-05-20")
END_DATE <- ymd("2017-05-21")
if (Service == SHUDDER){
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeShudder052217.csv")
}else{
tryCatch(
{
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeSN052217.csv")
},error = function(){
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeSundance052217.csv")
}
)
}
SetService(Serv)
START_DATE <- ymd("2017-05-20")
END_DATE <- ymd("2017-05-21")
if (Service == SHUDDER){
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeShudder052217.csv")
}else{
tryCatch(
{
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeSN052217.csv")
},error = function(err){
SubTbl <- LoadStripeSubscriptionTable("OtherData/StripeSundance052217.csv")
}
)
}
SetService(Serv)
Ser
SetService(Serv)
Serv
Serv =SUNDANCE
SetService(Serv)
START_DATE <- ymd("2017-05-20")
END_DATE <- ymd("2017-05-21")
Service
send.mail(from = "robbie.server@svod.io",
to = c(" kai.cui@amcnetworks.com"),
#  cc = c("CC Recipient <cc.recipient@gmail.com>"),
#  bcc = c("BCC Recipient <bcc.recipient@gmail.com>"),
subject = "Shudder User Reports Complete",
body = "Daily Shudder User Reports Complete!",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = TRUE)
install.packages('ggmap')
library(ggmap)
geocode('27705', output = 'all')
geocode('27705', output = 'latlona')
geocode('27705', output = 'more')
require(ggmap)
library(ggmap)
getwd()
geocode(c('27705','07632'), output = 'more')
zipcode_data = read.csv(ZIPCODE_FILE, stringsAsFactors = FALSE)
ZIPCODE_FILE = './data/zipcode_NJ.csv'
zipcode_data = read.csv(ZIPCODE_FILE, stringsAsFactors = FALSE)
getwd()
setwd('C:\Disks\D\WebScraping\WebScraping\Redfin\src')
setwd('C:\\Disks\\D\\WebScraping\\WebScraping\\Redfin\\src')
zipcode_data = read.csv(ZIPCODE_FILE, stringsAsFactors = FALSE)
zipcode_data
head(zipcode_data)
zipcode_data = read.delim(ZIPCODE_FILE, header=True, colClasses = c("character"), skipNul = False)
zipcode_data = read.delim(ZIPCODE_FILE, header=True, colClasses = c("character"), skipNul = F)
zipcode_data = read.delim(ZIPCODE_FILE, header=T, colClasses = c("character"), skipNul = F)
head(zipcode_data$zip.type.decommissioned.primary_city.acceptable_cities.unacceptable_cities.state.county.timezone.area_codes.world_region.country.latitude.longitude.irs_estimated_population_2014)
zipcode_data = read.delim(ZIPCODE_FILE, sep = ',',header=T, colClasses = c("character"), skipNul = F)
head(zipcode_data)
colNames(zipcode_data)
cols(zipcode_data)
colnames(zipcode_data)
geocode_data <- geocode(zipcode_data['zipcode'], output = 'more')
geocode_data <- geocode(zipcode_data[c('zipcode')], output = 'more')
geocode_data <- geocode(zipcode_data[c('zip')], output = 'more')
zipcode_data$zip
zipcode_data$zip[1]
len(zipcode_data$zip[1])
lenth(zipcode_data$zip[1])
length(zipcode_data$zip[1])
size(zipcode_data$zip[1])
nchar(zipcode_data$zip[1])
'0'*(5-nchar(zipcode_data$zip[1]))
['0']*(5-nchar(zipcode_data$zip[1]))
rep('0',2)
past(rep('0',2))
paste0(rep('0',2))
paste0(c(rep('0',2)))
paste0(rep('0',2),collapse = True)
paste0(rep('0',2),collapse = T)
paste(rep('0',2),collapse = T)
paste(rep('0',2),collapse = "")
len(zipcode_data)
length(zipcode_data)
dim(zipcode_data)
dim(zipcode_data)[1]
zipcode_data[1,'zip']
i=1
paste(rep('0',(5-nchar(zipcode_data$zip[i]))), collapse = '')}
paste(rep('0',(5-nchar(zipcode_data$zip[i]))), collapse = '')
paste(rep('0',(5-nchar(zipcode_data$zip[i]))), zip_data[i,'zip'], collapse = '')
paste(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')
paste0(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')
for (i in 1: dim(zipcode_data)[1]){zipcode_data[i, 'zip'] = paste0(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')}
geocode_data <- geocode(zipcode_data[c('zip')], output = 'more')
zipcode_data['zip']
geocode(zipcode_data['zip'], output = 'more')
zipcode_data['zip']
c(zipcode_data['zip'])
geocode_data <- geocode(c(zipcode_data['zip']), output = 'more')
c(zipcode_data['zip'])
geocode(c('27705','07632'), output = 'more')
geocode(c(zipcode_data['zip']), output = 'more')
geocode(c(zipcode_data[1:2,'zip']), output = 'more')
geocode(c(zipcode_data[1:,'zip']), output = 'more')
geocode(c(zipcode_data[:,'zip']), output = 'more')
geocode(c(zipcode_data[,'zip']), output = 'more')
geocode_data
geocode(c(08053), output = 'more')
geocode(c('08053'), output = 'more')
geocode(c('08988'), output = 'more')
aa=geocode(c('08053'), output = 'more')
aa
paste0(aa[,c('north', 'south','east','west')], collapse=':')
geocode_data <- geocode(c(zipcode_data[,'zip']), output = 'more',soure = 'google')
geocode_data <- geocode(c(zipcode_data[,'zip']), output = 'more',source = 'google')
geocode_data
zipcode_data = cbind(zipcode_data, geocode_data)
zipcode_data['viewport']= paste0(zipcode_data[,c('north', 'south','east','west')], collapse=':')
zipcode_data = zipcode_data[c('zip','state','primary_city','viewport')]
colnames(zipcode_data) =c('zipcode','state','description','viewport')
head(zipcode_data)
write.csv('test.csv',zipcode_data)
write.csv(zipcode_data,'test.csv')
zipcode_data = read.delim(ZIPCODE_FILE, sep = ',',header=T, colClasses = c("character"), skipNul = F)
for (i in 1: dim(zipcode_data)[1]){zipcode_data[i, 'zip'] = paste0(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')}
dim(geocode_data)
dim(zipcode_data)
zipcode_data = cbind(zipcode_data, geocode_data)
dim(zipcode_data)
head(zipcode_data)
aa
paste(aa$north, aa$south, aa$east, aa$west, sep =':')
zipcode_data['viewport']= paste(zipcode_data$north, zipcode_data$south, zipcode_data$east, zipcode_data$west, sep=':')
zipcode_data = zipcode_data[c('zip','state','primary_city','viewport')]
colnames(zipcode_data) =c('zipcode','state','description','viewport')
zipcode_data = zipcode_data[!is.na(zipcode_data$viewpoint),]
head(zipcode_data)
zipcode_data = read.delim(ZIPCODE_FILE, sep = ',',header=T, colClasses = c("character"), skipNul = F)
for (i in 1: dim(zipcode_data)[1]){zipcode_data[i, 'zip'] = paste0(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')}
zipcode_data = cbind(zipcode_data, geocode_data)
zipcode_data['viewport']= paste(zipcode_data$north, zipcode_data$south, zipcode_data$east, zipcode_data$west, sep=':')
zipcode_data = zipcode_data[c('zip','state','primary_city','viewport')]
colnames(zipcode_data) =c('zipcode','state','description','viewport')
head(zipcode_data)
aa=zipcode_data[!is.na(zipcode_data$viewpoint),]
!is.na(zipcode_data$viewpoint)
is.empty(zipcode_data$viewpoint)
zipcode_data[-which(zipcode_data$viewport == ""), ]
zipcode_data[which(zipcode_data$viewport == ""), ]
zipcode_data
which(zipcode_data$viewport == ""
)
head(geocode_data)
geocode_data[geocode_data$zip=='08988',]
dim(zipcode_data)
dim(geocode_data)
write.csv('test.csv',geocode_data)
write.csv(geocode_data,'test.csv')
write.csv(zipcode_data,'test1.csv')
zipcode_data = read.delim(ZIPCODE_FILE, sep = ',',header=T, colClasses = c("character"), skipNul = F)
for (i in 1: dim(zipcode_data)[1]){zipcode_data[i, 'zip'] = paste0(rep('0',(5-nchar(zipcode_data$zip[i]))), zipcode_data[i,'zip'], collapse = '')}
zipcode_data = cbind(zipcode_data, geocode_data)
zipcode_data['viewport']= paste(zipcode_data$north, zipcode_data$south, zipcode_data$east, zipcode_data$west, sep=':')
zipcode_data = zipcode_data[!is.na(zipcode_data$south),]
head(zipcode_data)
zipcode_data = zipcode_data[c('zip','state','primary_city','viewport')]
colnames(zipcode_data) =c('zipcode','state','description','viewport')
write.csv(zipcode_data,'../config/cfg_scraping_NJ.csv')
write.csv(zipcode_data,'../config/cfg_scraping_NJ.csv', row.names = F)
write.csv(zipcode_data,'../config/cfg_scraping_NJ.csv', row.names = F)
